import Head from "next/head";
import { useRouter } from "next/router";
import { useDisclosure, useDidUpdate, useDebouncedState  } from '@mantine/hooks';
import { PasswordInput, Stack, Button, Text, Loader, Title } from '@mantine/core';
import styles from '../features/Authentication/assets/styles/Auth.module.css';
import { useState} from "react";
import { signIn } from "next-auth/react";

export default function Login(){
    const router = useRouter();
    const token = router.query.code;
    const [visible, { toggle }] = useDisclosure(false);
    const [password, setPassword] = useDebouncedState('', 200);
    const [confirmPass, setConfirmPass] = useDebouncedState('', 200);
    const [match, setMatch] = useState(true)
    const [loading, setLoading] = useState()

    useDidUpdate(()=> {
        setMatch(confirmPass === password)
    }, [confirmPass])

    const handleChange = async()=> {
        if(!match){return}
        setLoading(true)
        const params = {token, newPassword:password}
        const response = await fetch('api/auth/change-password', {
            method:'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(params)
        })
        const data = await response.json()
        if(data.code === 0){
            setLoading(false)
            signIn()
        }
    }

        return(
            <>
            <Head>
                <title>Localbly|Reset Password</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
           <div className={styles.loginPage}>
            <div className={styles.loginTitle}>
                
            </div>
            <Stack maw={380} mx="auto">
                <Title order={2}>Create a new password</Title>
                <Text fz="md">Create a new password for your shop</Text>
                    <PasswordInput
                        label="Password"
                        defaultValue={password}
                        visible={visible}
                        size="md"
                        onVisibilityChange={toggle}
                        onChange={(event) => setPassword(event.currentTarget.value)}
                    />
                    <PasswordInput
                        label="Confirm password"
                        defaultValue={confirmPass}
                        visible={visible}
                        size="md"
                        onVisibilityChange={toggle}
                        error = {!match && 'Passwords do not match'}
                        onChange={(event) => setConfirmPass(event.currentTarget.value)}
                    />
                    <Button type="button" disabled={loading} onClick={handleChange} size="md" >
                        {loading ? <span>Loading <Loader variant="dots" /></span> : 'Reset Password'}
                    </Button>
                </Stack>
           </div>
                     
                    
                    
                        
                
            </>
        );
     
    
}

